---
output: github_document
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
```

# codebookr

<!-- badges: start -->
<!-- badges: end -->

The codebook package is intended to make it easy for users to create codebooks (i.e. data dictionaries) directly from data frame.

## Installation

You can install the development version of codebook like so:

```{r eval=FALSE}
# install.packages("devtools")
devtools::install_github("brad-cannell/codebook")
```

## Exported functions

* codebook: The codebook function assists with the creation of a codebook for a given data frame.   

* cb_add_col_attributes: Add arbitrary attributes to columns (e.g., description, source, column type). These attributes can later be accessed to fill in the column attributes table. Note: Column type is the type I say it is: categorical or numeric, Data type is what the computer says it is.

## Simple example

This simple example demonstrates how to use the `codebook` package to make a codebook from a **labeled** data frame. 

```{r example}
library(codebookr)
library(dplyr, warn.conflicts = FALSE)
```

### Load data

By default, `codebookr` assumes that you want to make a codebook about a dataset file that you have saved somewhere, as opposed to a data frame you're working on in an r session, but don't intend to save. Therefore, the first thing you will need to do is read the data into the current R session.

For the purposes of making a self-contained example, the codebook package comes with a small example data frame that is intended to have some of the features of real study data. We will use it to demonstrate how to use `codebook` below. 

```{r}
# Load example data
data(study)
```

```{r}
glimpse(study)
```

### Column types

`codebook` classifies all columns as one of four types and uses these categories to determine which descriptive statistics are given in the codebook document:

1. Categorical with many different categories, for example the `id` column of the `study` data frame.     
2. Categorical with few different categories, for example the `gender` column of the `study` data frame.     
3. Date, for example the `date` column of the `study` data frame.    
4. Numeric, for example the `height` column of the `study` data frame.    

### Add column attributes

Typically, though not necessarily (see [What if the variables already have labels?](#already-labeled})), the first step in creating your codebook will be to add column attributes to your data. The `cb_add_col_attributes()` function is a convenience function that allows you to add arbitrary attributes to columns (e.g., description, source, column type). These attributes can later be accessed to fill in the column attributes table of the codebook document. Column attributes can serve a similar function as variable labels in SAS or Stata. However, you can assign many different attributes to a column and they can contain any kind of information you want. 

Note: these attributes are added to codebook automatically. 

Note: Column type is the type I say it is: categorical or numeric, Data type is what the computer says it is. (add Word example to refer to)

The arguments to `cb_add_col_attributes()` are:

* **df:** The data frame containing the column you want to add the attribute to.   
* **.x:** The name of the column you want to add the attribute to in `df`.    
* **...:** Arbitrary list of attributes (i.e., attribute = "value").    

```{r}
study <- study %>%
  cb_add_col_attributes(
    id,
    description = "Study identification variable"
  ) %>%

  cb_add_col_attributes(
    sex,
    description = "Biological sex of the participant assigned at birth.",
    col_type = "Categorical"
  ) %>%
  
  cb_add_col_attributes(
    date,
    description = "Date of enrollment into study."
  ) %>%
  
  cb_add_col_attributes(
    height,
    description = "Participant's height in inches at date of enrollment."
  ) 
```

### Create Word codebook document

Under the hood, `codebookr` uses the [flextable](https://ardata-fr.github.io/flextable-book/) and [officer](https://davidgohel.github.io/officer/index.html) packages to create the Word codebook. 

The arguments to the `codebook()` function are:

* **df:** The saved file at `path`, read into memory as a data frame.      
* **path:** The path to the saved dataset of interest.    
* **title:** An optional title that will appear at the top of the Word codebook document.    
* **subtitle:** An optional subtitle that will appear at the top of the Word codebook document.    
* **description:** An optional text description of the dataset that will appear on the first page of the Word codebook document.     

```{r}
study_codebook <- codebook(
  df = study,
  title = "My Example Study",
  subtitle = "A Subtitle for My Example Study Codebook"
)
```

```{r}
print(study_codebook, target = "codebook_detect_5wk.docx")
```





### What if you have a lot of variables?

Get a chunk of code for each column in the data and then copy and paste below.

```{r}
for (i in seq_along(names(study))) {
cat(paste0('
  codebook_add_col_attributes( \n    ',
    names(study)[i], ', \n    ',
    'description = ""
  ) %>%
'))
}
```

### What if the variables already have labels? {#already-labeled}

It's possible that you've already added column attributes to your data that you want `codebook` to use. More likely, you have a data frame that was imported from a binary file created by statistical analysis apllication other than R and useful attributes (e.g. variable labels) were imported with the data.  


### Setting the col_type manually




# Create description of the data {#description}

```{r}
description <- "In collaboration with Texas Adult Protective Services (APS) and one of the largest mobile healthcare providers in North Texas — MedStar Mobile Healthcare (MedStar) — our team developed and piloted an EA screening tool: Detection of Elder Abuse Through Emergency Care Technicians (DETECT). The DETECT tool was designed specifically to help medics identify potential EA among community-dwelling older adults during an emergency response. DETECT relies entirely on the medics’ systematic observations of the older adults’ physical and social environment — no direct questioning of the older adult or their caregivers is involved. The intent was to create an EA screening tool that was easy for medics to use in the field and that helped medics capture information about older adults, their environments, and their caregivers that is thought to be associated with the occurrence of EA. 

We pilot tested using the DETECT screening tool with medics in the field between September 17th and October 26th, 2015. During the pilot test, MedStar’s Electronic Patient Care Reporting system (ePCR) was programmed to automatically prompt all medics to complete an EA screening using the DETECT tool while on an eligible 911 response. An eligible 911 response was defined as a call for a community-dwelling patient who was 65 years of age or older, the setting was the patient’s residence, and the patient resided in the community (e.g., private home, unlicensed adult foster homes, unlicensed board and care homes, etc.). Other types of residences (e.g., licensed skilled nursing facilities) were excluded because reports of EA in these settings are generally not investigated by APS in Texas. By definition, older adults who participated in the pilot study had to live in MedStar’s service area of an estimated (978,000 residents), which included Fort Worth, Texas, and 14 surrounding communities."
```

[top](#top)










# Create codebook document {#create}

```{r}
codebook_detect_5wk <- codebook(
  df = detect_5wk,
  path = "../data/detect_5wk.csv",
  title = "Detection of Elder abuse Through Emergency Care Technicians (DETECT)",
  subtitle = "5-Week Pilot Study",
  description = description
)
```

```{r}
print(codebook_detect_5wk, target = "codebook_detect_5wk.docx")
```













